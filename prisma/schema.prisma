// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String 
  email String @unique
  password String? 
  role UserRole @default(CLIENT)
  emailVerified Boolean @default(false)
  client Client?
  agent Agent?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id String @id @default(uuid())
  phone String
  cpf String
  rg String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  rentalRequests RentalRequest[]
  rentals Rental[]
}

model Agent {
  id String @id @default(uuid())
  bio String
  license String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PropertyType {
  id String @id @default(uuid())
  name String
  property Property[]
}

model PropertyImage {
  id String @id @default(uuid())
  url String
  cover Boolean @default(false)
  propertyId String @unique
  property Property @relation(fields: [propertyId], references: [id])
}

model Property {
  id String @id @default(uuid())
  title String
  description String?
  status PropertyStatus @default(Available)
  price Decimal @db.Money
  size Decimal? @db.Decimal(10,2)
  bedrooms Int?
  bathrooms Int?
  parkingSpaces Int?
  location Json? @db.JsonB
  propertyTypeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  propertyType PropertyType @relation(fields: [propertyTypeId], references: [id])
  images PropertyImage[]
  rentalRequests RentalRequest[]
  rentals Rental[]
}

model RentalRequest {
  id String @id @default(uuid())
  clientId String
  propertyId String
  status RentalRequestStatus @default(Processing)
  budget Decimal @db.Money
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client Client @relation(fields: [clientId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
}

model Rental {
  id String @id @default(uuid())
  clientId String
  propertyId String
  total Decimal @db.Money
  contractInitDate DateTime
  contractEndDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client Client @relation(fields: [clientId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
  payments Payment[]
  maintenanceRequests MaintenanceRequest[]
  maintenances Maintenance[]
}

model PaymentMethod {
  id Int @id @default(autoincrement())
  name String
  payments Payment[]
}

model Payment {
  id String @id @default(uuid())
  rentalId String
  paymentDate DateTime
  status PaymentStatus @default(Pending)
  paymentMethodId Int
  amound Decimal @db.Money
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  rental Rental @relation(fields: [rentalId], references: [id])
}

model MaintenanceRequest {
  id String @id @default(uuid())
  rentalId String
  status MaintenanceRequestStatus @default(Processing)
  notes String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rental Rental @relation(fields: [rentalId], references: [id])
}

model Maintenance {
  id String @id @default(uuid())
  rentalId String
  status MaintenanceStatus @default(In_Progress)
  notes String @db.Text
  total Decimal @db.Money @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rental Rental @relation(fields: [rentalId], references: [id])
}

enum UserRole {
  ADMIN
  AGENT
  CLIENT
}

enum PropertyStatus {
  Available
  Rented
  Under_maintenance
}

enum RentalRequestStatus {
  Processing
  Accepted
  Refused
  Canceled
} 

enum PaymentStatus {
  Pending
  Processing
  Paid
  Failed
  Canceled
  Refunded
  Expired
}

enum MaintenanceRequestStatus {
  Processing
  Accepted
  Refused
  Canceled
}

enum MaintenanceStatus {
  In_Progress
  Finished
  Aborted
  Canceled
}
